# +
import os
import json

class PPMLConf:
    def __init__(self, k8s_enabled = True, sgx_enabled = True):
        self.conf = {}
        self.k8s_conf = {}
        self.k8s_env = {}
        self.volume_host = {}
        self.volume_nfs = {}
        self.volume_mount = {}
        self.main_script = {}
        self.k8s_enabled = k8s_enabled
        self.sgx_enabled = sgx_enabled
        self.init_k8s_conf()
        print("init")

    def set(self, key, value):
        if key not in self.conf:
            self.conf[key] = value
        else:
            print("set fail")
        return self
    
    def set_k8s(self, key, value):
        self.k8s_conf[key] = value
        return self
    
    def set_k8s_env(self, key, value):
        self.k8s_env[key] = value
        return self
    
    def set_volume_host(self, key, value):
        self.volume_host[key] = value
        return self
    
    def set_volume_nfs(self, key, ip, value):
        dict = {}
        dict["nfs_server"] = ip
        dict["nfs_path"] = value
        self.volume_nfs[key] = dict
        return self
    
    def set_volume_mount(self, key, value):
        self.volume_mount[key] = value
        return self

    def test(self):
        self.set("test", "123")
        print(self.conf.get("test"))
    
    def conf_to_args(self):
        args = []
        if self.k8s_enabled == True:
            import ipyparams
            main_script = ipyparams.notebook_name
            if (main_script == ""):
                raise ValueError("jupyter init empty error, just try again")
            current_dir = os.getcwd()
            self.set("main_script", current_dir + "/" + ipyparams.notebook_name)
            self.set("main_script_args", "--test 2")
            for key, value in self.k8s_conf.items():
                args.append("--" + key)
                args.append(value)
            for key, value in self.k8s_env.items():
                args.append("--env")
                args.append(key)
                args.append(value)
            for key, value in self.volume_host.items():
                args.append("--volume")
                data = {
                    "name": key,
                    "hostPath": {
                    "path": value
                    }
                }
                json_string = json.dumps(data)
                args.append(json_string)
            for key, value in self.volume_nfs.items():
                args.append("--volume")
                data = {
                    "name": key,
                    "nfs": {
                    "server": value["nfs_server"],
                    "path": value["nfs_path"]
                    }
                }
                json_string = json.dumps(data)
                args.append(json_string)
            for key, value in self.volume_mount.items():
                args.append("--volume_mount")
                data = {
                    "mountPath": key,
                    "name": value
                }
                json_string = json.dumps(data)
                args.append(json_string)
        for key, value in self.conf.items():
            args.append("--" + key)
            args.append(value)
        print(args)
        return args

        
    

    def init_k8s_conf(self):
        if self.k8s_enabled:
            # set device-plugin and aesm
            self.set_volume_host("device-plugin", "/var/lib/kubelet/device-plugins") \
                .set_volume_mount("/var/lib/kubelet/device-plugins", "device-plugin") \
                .set_volume_host("aesm-socket", "/var/run/aesmd/aesm.socket") \
                .set_volume_mount("/var/run/aesmd/aesm.socket", "aesm-socket")
            
            # set conf
            self.set_k8s_env("http_proxy", "http://child-prc.intel.com:913/") \
                .set_k8s_env("https_proxy", "http://child-prc.intel.com:913/") \
                .set_k8s_env("no_proxy", "10.239.45.10:8081,10.112.231.51,10.239.45.10,172.168.0.*") \
                .set_k8s("namespace", "default") \
                .set_k8s("image", "intelanalytics/bigdl-ppml-trusted-deep-learning-gramine-ref:2.4.0-SNAPSHOT-test") \
                .set_k8s("driver_port", "29500")
            
            
        if self.sgx_enabled:
            self.set_k8s_env("SGX_ENABLED", "true")
        else:
            self.set_k8s_env("SGX_ENABLED", "false")

